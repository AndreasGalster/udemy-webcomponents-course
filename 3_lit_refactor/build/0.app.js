(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[,function(n,e,t){"use strict";t.r(e);class a extends HTMLElement{connectedCallback(){this.noShadow||this.attachShadow({mode:"open"}),this.render()}render(n){this.noShadow?this.innerHTML=n||this.template:this.shadowRoot.innerHTML=n||this.template}}const i={trbl:"\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n",card:"\n    img {\n        border-radius: 50%;\n    }\n\n    h1, p {\n        margin: 10px;\n        padding: 0;\n        font-family: 'Roboto';\n    }\n\n    h1 {\n        font-size: 1.4em;\n        color: var(--primary);\n    }\n"};customElements.define("profile-card",class extends a{constructor(){super(),this.addEventListener("click",n=>this.dispatchEvent(new CustomEvent("openDialog",{detail:this.profileData,bubbles:!0,composed:!0})))}get template(){return`\n        <style>\n                :host {\n                    padding: 50px;\n                    margin: 2px;\n                    background: #EEE;\n                    width: calc(25% - 4px);\n                    box-sizing: border-box;\n                    cursor: pointer;\n                    text-align: center;\n                    display: block;\n                    opacity: 0;\n                }                  \n                \n                ${i.card}\n            </style>\n            \n            ${this.profileData?`\n            <img src=${this.profileData.picture.thumbnail} /> \n            <h1>${this.profileData.name.first}</h1>`:""}\n        `}static get observedAttributes(){return["profile-data"]}attributeChangedCallback(n,e,t){t&&"profile-data"===n&&(this.profileData=JSON.parse(decodeURIComponent(t)),this.removeAttribute("profile-data")),this.render()}});customElements.define("profile-cards-animator",class extends a{connectedCallback(){super.connectedCallback(),this.shadowRoot.querySelector("slot").addEventListener("slotchange",n=>this.animate())}animate(){[...this.querySelectorAll("profile-card")].map((n,e)=>{n.animate({opacity:[0,1],transform:["scale(0.8)","scale(1)"]},{duration:250,iterations:1,delay:50*e}).onfinish=(e=>n.style.opacity=1)})}get template(){return"\n            <style>\n                :host {\n                    display: flex;\n                    flex-wrap: wrap;\n                    overflow-x: hidden;\n                }\n\n                ::slotted(profile-card) {\n                    transition: transform 0.2s ease-in-out;\n                }\n\n                ::slotted(profile-card:hover) {\n                    transform: scale(1.05);\n                    background: white;\n                    box-shadow: 0 2px 9px 1px rgba(0,0,0,0.2);\n                    border-radius: 3px;\n                }\n            </style>\n            <slot></slot>\n        "}});customElements.define("profile-dialog",class extends a{open(n){this.profileData=n,this.render(),this.shadowRoot.querySelector("dialog").addEventListener("click",n=>n.target.close()),this.shadowRoot.querySelector("dialog").showModal()}close(){this.shadowRoot.querySelector("dialog").close()}get template(){return`\n            <style>\n                ${i.card}\n                \n                dialog::backdrop {\n                    background-color: rgba(0, 0, 0, 0.8);\n                }\n\n                dialog {\n                    max-width: 600px;\n                    width: auto;\n                    text-align: center;\n                }   \n\n                .icon {\n                    width: 30px; \n                    height: 30px;     \n                    margin: 3px;               \n                }\n                \n                div {\n                    display: flex;\n                    align-items: center;\n                    margin: 20px;         \n                    color: var(--primary);           \n                }\n\n                section {\n                    display: flex;\n                    justify-content: center;\n                }\n            </style>\n            <dialog>\n                ${this.profileData?`\n                <img src=${this.profileData.picture.thumbnail} /> \n                <h1>${this.profileData.name.first} ${this.profileData.name.last}</h1>\n                \n                <section>\n                    <div>\n                        <img class='icon' src='https://www.materialui.co/materialIcons/hardware/smartphone_black_96x96.png' />\n                        <p>${this.profileData.cell}</p>\n                    </div>\n                    \n                    <div>\n                        <img class='icon' src='https://www.materialui.co/materialIcons/communication/email_black_96x96.png' />\n                        <p>${this.profileData.email}</p>\n                    </div>\n                </section>`:""}\n\n                <p>Proin finibus lectus vitae accumsan lacinia. Interdum et malesuada fames ac ante ipsum primis in faucibus. Maecenas volutpat aliquet sapien sit amet faucibus. Donec id velit sit amet felis pharetra tincidunt. Proin vitae nibh a massa commodo blandit. Sed quam lorem, molestie ac nisi in, blandit interdum tortor. Nunc interdum id quam nec vestibulum.</p>\n            </dialog>\n        `}}),t.d(e,"AppShell",function(){return o});class o extends a{constructor(){super(),this.noShadow=!0,this.addEventListener("openDialog",n=>this.querySelector("profile-dialog").open(n.detail))}connectedCallback(){super.connectedCallback(),this.getPeople()}async getPeople(){let n=await fetch("https://randomuser.me/api/?results=50"),e=await n.json();this.people=e.results,this.render()}get template(){return`\n            <style>\n                :root{\n                    --primary: rgb(33, 150, 243);\n                }\n\n                app-shell {\n                    ${i.trbl}\n                    overflow-y: overlay;\n                }\n            </style>\n\n            <profile-dialog></profile-dialog>\n\n            <profile-cards-animator>\n                ${this.people?this.people.map(n=>`<profile-card profile-data=${encodeURIComponent(JSON.stringify(n))}></profile-card>`).join(""):""} \n            </profile-cards-animator>\n        `}}customElements.define("app-shell",o)}]]);